{"version":3,"sources":["cpt_customFields.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","window","addEventListener","ClonedTargetId","duplicateSubSection","Id","GreatGrandParent","IdArray","getlastSubSectionValidId","getBaseId","replace","id","NewObject","$","clone","attr","insertAfter","FixChildrenId","substring","lastIndexOf","getlastSectionValidId","BaseId","LastValidId","FirstAvailable","FoundQuery","ReturnArray","Array","SearchId","TargetId","NewId","PreviousId","targetID","arguments","undefined","Target","document","getElementById","kids","querySelectorAll","indexOf","cleanId","j","attributes","name","cleanName","value","click","Parent","target","parentElement","GrandParent","idsArray","split","lastId","classList","contains","newSection","duplicateSection","console","log","checkAllNodes","TargetObject","allElements","childNodes","nodeName","StepIndex","Number","addButtonDown","IdsArray","LastTargetId","previousExtension","IdCombination","remove","erasedExtension","Section","RemoveTarget","RemoveTarget_id","parseInt","oldTargetId","newTargetId","removeButtonDown"],"mappings":"CAAY,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,mBAAmBC,SAASA,QAAQ,IAAIF,GAAGC,EAAE,OAAOA,EAAEF,GAAE,GAAI,GAAGI,EAAE,OAAOA,EAAEJ,GAAE,GAAI,IAAIK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,KAAK,MAAMK,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,IAAIb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGS,QAAQ,IAAI,IAAIL,EAAE,mBAAmBD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,IAAI,OAAOD,EAA7b,CAA4c,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,aAEAK,OAAOC,iBAAiB,OAAQ,WAC3B,IAAIC,EAiHJ,SAASC,EAAoBC,EAAIC,GAE5B,IAKIC,EAAUC,EALDC,EAAUJ,GACRA,EAAGK,QAAQ,IAAK,IAChBJ,EAAiBK,IAM5BC,EAAYC,EAAE,IAAMN,EAAgB,OAAe,aAAGO,OAAM,GAChEF,EAAUG,KAAK,KAAMR,EAAgB,OAAkB,gBACvDM,EAAED,GAAWI,YAAY,IAAMT,EAAgB,OAAe,aAG9DU,EAAcV,EAAgB,OAAe,YAAGA,EAAgB,OAAkB,eAAGA,EAAgB,OAAkB,gBAEvHJ,EAAiBI,EAAgB,OAAkB,eAiHxD,SAASE,EAAUE,GAEd,OADaA,EAAGO,UAAU,EAAGP,EAAGQ,YAAY,MAGjD,SAASC,EAAsBC,GAK1B,IAJA,IAEIC,EACAC,EAHApC,EAAI,EACJqC,GAAa,EAGVA,GACqC,EAAnCX,EAAE,IAAMQ,EAAS,IAAMlC,GAAGW,QACzBwB,EAAcD,EAAS,IAAMlC,EAC7BA,MAEAoC,EAAiBF,EAAS,IAAMlC,EAChCqC,GAAa,GAGvB,IAAIC,EAAc,IAAIC,MAGtB,OAFAD,EAAyB,YAAIH,EAC7BG,EAA4B,eAAIF,EACzBE,EAEZ,SAASjB,EAAyBa,EAAQM,EAAUC,GAC/C,IAGIN,EACAC,EAJApC,EAAI,EACJqC,GAAa,EAIbC,EAAc,IAAIC,MAGtB,IAFAD,EAAoB,OAAI,IAAIC,MAC5BD,EAAoB,OAAI,IAAIC,MACrBF,GAAY,CACd,IAAIK,EAAQD,EAASlB,QAAQiB,EAAUN,EAAS,IAAMlC,GACtDsC,EAAoB,OAAkB,eAAII,EACd,EAAxBhB,EAAE,IAAMgB,GAAO/B,QACd2B,EAAoB,OAAe,YAAII,EACvCP,EAAcD,EAAS,IAAMlC,EAC7BA,MAEAoC,EAAiBF,EAAS,IAAMlC,EAChCqC,GAAa,GAKvB,OAFAC,EAAoB,OAAe,YAAIH,EACvCG,EAAoB,OAAkB,eAAIF,EACnCE,EAEZ,SAASR,EAAca,EAAYD,GAC9B,IAAIE,EAA8B,EAAnBC,UAAUlC,aAA+BmC,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,GAEnF,GAAgB,IAAZD,EAEC,IAAIG,EAASC,SAASC,eAAeP,QAEjCK,EAASC,SAASC,eAAeL,GAI1C,IADA,IAAIM,EAAOH,EAAOI,iBAAiB,KAC1BnD,EAAI,EAAGA,EAAIkD,EAAKvC,OAAQX,IAG5B,IAAsC,EAAlCkD,EAAKlD,GAAGwB,GAAG4B,QAAQT,GAAkB,CACpC,IACIU,EADUH,EAAKlD,GAAGwB,GACAD,QAAQoB,EAAYD,GAK1C,IAAK,IAAIY,KAJTJ,EAAKlD,GAAGwB,GAAK6B,EAICH,EAAKlD,GAAGuD,WACjB,GAAmC,SAA/BL,EAAKlD,GAAGuD,WAAWD,GAAGE,KAAiB,CACtC,IACIC,EADYP,EAAKlD,GAAGuD,WAAWD,GAAGI,MACZnC,QAAQoB,EAAYD,GAC9CQ,EAAKlD,GAAGuD,WAAWD,GAAGI,MAAQD,IAtTvD/B,EAAE,cAAciC,MAAM,SAAU/D,IAYhC,SAAuBA,GAIlB,IAAIgE,EAASZ,SAASC,eAAerD,EAAEiE,OAAOrC,IAAIsC,cAE9CC,EAAcH,EAAOE,cAErB3C,EAAmB4C,EAAYD,cAE/BE,EAAWpE,EAAEiE,OAAOrC,GAAGyC,MAAM,KAE7BjE,EAAIgE,EAASrD,OAAS,EACtBuD,EAASF,EAAShE,GAGlB4D,EAAOO,UAAUC,SAAS,eA8DnC,SAA0BlD,GAErB,IAAIgB,EAASZ,EAAUJ,GAEnBE,EAAU,IAAImB,MAEdJ,GADJf,EAAUa,EAAsBC,IACO,YACnCE,EAAiBhB,EAAwB,eAEzCiD,EAAa3C,EAAE,IAAMS,GAAaR,OAAM,GAC5C0C,EAAWzC,KAAK,KAAMQ,GACtBV,EAAE2C,GAAYxC,YAAY,IAAMM,GAGhCL,EAAcK,EAAaC,GAC3BpB,EAAiBoB,EA1EZkC,CAAiBJ,GACXN,EAAOO,UAAUC,SAAS,uBAEhCnD,EAAoBiD,EAAQ/C,GACtByC,EAAOO,UAAUC,SAAS,eAEhCnD,EAAoBiD,EAAQH,GACtBH,EAAOO,UAAUC,SAAS,kBAChCnD,EAAoBiD,EAAQN,IAE5BW,QAAQC,IAAI,2CACZD,QAAQC,IAAI,eAAiBZ,EAAOpC,IACpC+C,QAAQC,IAAIZ,GACZW,QAAQC,IAAI,oBAAsBT,EAAYvC,IAC9C+C,QAAQC,IAAIT,GACZQ,QAAQC,IAAI,yBAA2BrD,EAAiBK,IACxD+C,QAAQC,IAAIrD,GACZoD,QAAQC,IAAI,eAAiBN,KAcvC,SAASO,EAAcC,GAClB,GAAIA,EAEC,IADA,IAAIC,EAAcD,EAAaE,WACtB5E,EAAI,EAAGA,EAAI2E,EAAYhE,OAAQX,IACnC,GAA+B,SAA3B2E,EAAY3E,GAAG6E,UAOd,GAJAF,EAAY3E,GAAG0D,MAAQ,IAI2B,EAA9CiB,EAAY3E,GAAGwD,KAAKJ,QAAQ,eAAqB,CAEhD,IAAI0B,EAAYH,EAAY3E,GAAGwD,KAAKzB,UAAU4C,EAAY3E,GAAGwD,KAAKJ,QAAQ,6BAA+B,GAAIuB,EAAY3E,GAAGwD,KAAKJ,QAAQ,6BAA+B,IAEnK2B,OAAOD,KACPA,EAAYC,OAAOD,EAAUvD,QAAQ,IAAK,MAE/CuD,IACAH,EAAY3E,GAAG0D,MAAQoB,QAEa,EAAnCH,EAAY3E,GAAG4E,WAAWjE,QAAyC,OAA3BgE,EAAY3E,GAAG6E,WAC7DJ,EAAcE,EAAY3E,IAxBzCyE,CADmBzB,SAASC,eAAejC,IAzD3CgE,CAAcpF,KAEnB8B,EAAE,iBAAiBiC,MAAM,SAAU/D,IA8HnC,SAA0BA,GAErB,IAAIqF,EAAWrF,EAAEiE,OAAOrC,GAAGyC,MAAM,KAG7BjE,EAAIiF,EAAStE,OAAS,EACtBuE,EAAeD,EAASjF,GAC5BA,EAAIiF,EAAStE,OAAS,EACPsE,EAASjF,GAAxB,IAGI4D,EAASZ,SAASC,eAAerD,EAAEiE,OAAOrC,IAAIsC,cAE9CC,EAAcH,EAAOE,cAErB3C,EAAmB4C,EAAYD,cAInC,CAAA,GAAIF,EAAOO,UAAUC,SAAS,eAAgB,CACzC,IAAIe,EAEAjD,EAASZ,EAAU4D,GACnBE,EAAgBnD,EAAsBC,GAE1C,GAAIgD,IAAiBhD,EAAS,MAAQkD,EAA2B,cAAMlD,EAAS,KAC3E,OACE,GAAIkD,EAA2B,cAAMF,EAIvC,OADAxD,EAAE,IAAMwD,GAAcG,SAI3B3D,EAAE,IAAMwD,GAAcG,SAGtB,IAFA,IAAIC,EAAkBJ,EAAa3D,QAAQW,EAAS,IAAK,IACrDE,EAAiBgD,EAA2B,YAAE7D,QAAQW,EAAS,IAAK,IACjEoD,EAAkBlD,GAEpB+C,IADAG,EACsC,GACtCC,EAAUvC,SAASC,eAAef,EAAS,IAAMoD,IAEzC9D,GAAKU,EAAS,IAAMiD,EAEjC,OAEA,GAAIvB,EAAOO,UAAUC,SAAS,uBAEzB,IAAIoB,EAAerE,OACjB,GAAIyC,EAAOO,UAAUC,SAAS,eAEhC,IAAIoB,EAAezB,MACjB,CAAA,IAAIH,EAAOO,UAAUC,SAAS,kBAUhC,OAPAG,QAAQC,IAAI,2CAFZ,IAAIgB,EAAe5B,EAWxB,IAAI1B,EAASZ,EAAU4D,GACnBO,EAAkBD,EAAahE,GAC/B4D,EAAgB/D,EAAyBa,EAAQgD,EAAcO,GAEnE,GAAIP,IAAiBhD,EAAS,MAAQkD,EAAsB,OAAe,cAAMlD,EAAS,KAErF,OAEL,GAAIkD,EAAsB,OAAe,cAAMF,EAG1C,OADAxD,EAAE,IAAMwD,GAAcG,SAI3B,IAAIC,EAAkBI,SAASR,EAAa3D,QAAQW,EAAS,IAAK,KAC9DC,EAAcuD,SAASN,EAAsB,OAAe,YAAE7D,QAAQW,EAAS,IAAK,KACpFlC,EAAIsF,EAER,IADA5D,EAAE,IAAM+D,GAAiBJ,SAClBrF,EAAImC,GAAa,CAInBgD,IAFAnF,EAEwB,EAExB,IAAI2F,EAAcF,EAAgBlE,QAAQ2D,EAAchD,EAAS,IAAMlC,GACnE4F,EAAcH,EAAgBlE,QAAQ2D,EAAchD,EAAS,IAAMiD,GAEnEI,EAAUvC,SAASC,eAAe0C,GAClCJ,EACCA,EAAQ/D,GAAKoE,EAEbrB,QAAQC,IAAI,eAAiBxE,EAAI,MAAQoC,GAG9CN,EAAcI,EAAS,IAAMlC,EAAGkC,EAAS,IAAMiD,EAAmBS,KA/N5EC,CAAiBjG,QA0UzB,KAAK,GAAG,CAAC","file":"cpt_customFields.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.addEventListener(\"load\", function () {\n     var ClonedTargetId;\n     /*1. We are going to add eventst to this buttons - Add and remove */\n     /*2. Create the add function - Gets the parent div and multiplies it updating the id's */\n     /*3. Create the remove function - updating id's */\n     /*4. After Remove - updating id's */\n\n     $(\".addButton\").click(function (e) {\n\n          addButtonDown(e);\n     });\n     $(\".removeButton\").click(function (e) {\n          removeButtonDown(e);\n     });\n     /* we store in a variable the last item created */\n\n     /* ---------------------------------------------- */\n     /*                   add functions                */\n     /* ---------------------------------------------- */\n     function addButtonDown(e) {\n\n          /* From the target id we get all the parents information */\n          /* We look for the parent - which is the one we are going to duplicate */\n          var Parent = document.getElementById(e.target.id).parentElement;\n          /* We look for the grandparent which is the target */\n          var GrandParent = Parent.parentElement;\n          /* We look for the Greatgrandparent which is the target */\n          var GreatGrandParent = GrandParent.parentElement;\n\n          var idsArray = e.target.id.split(\"-\");\n          /* we get the last id */\n          var i = idsArray.length - 4;\n          var lastId = idsArray[i];\n\n          /* we see if e is a Section */\n          if (Parent.classList.contains('Section_div')) {\n               /* We are duplicating a whole Section */\n               /* we need to duplicate group_0 div*/\n               duplicateSection(lastId);\n          } else if (Parent.classList.contains('SubSection_title_h3')) {\n               /* We are duplicating a whole SubSection */\n               duplicateSubSection(lastId, GreatGrandParent);\n          } else if (Parent.classList.contains('Item_sub_td')) {\n               /* Items */\n               duplicateSubSection(lastId, GrandParent);\n          } else if (Parent.classList.contains('Item_input_div')) {\n               duplicateSubSection(lastId, Parent);\n          } else {\n               console.log('Why am I here?-------------------------');\n               console.log(\"parent id - \" + Parent.id);\n               console.log(Parent);\n               console.log(\"grandparent id - \" + GrandParent.id);\n               console.log(GrandParent);\n               console.log(\"GreatGrandParent id - \" + GreatGrandParent.id);\n               console.log(GreatGrandParent);\n               console.log(\"lastId id - \" + lastId);\n          }\n          /* Now that we have added the new item */\n          /* we remove the content of the fields */\n\n          clearFields();\n     }\n     /* clear the field content */\n     function clearFields() {\n\n          /* Addtarget class  */\n          var TargetObject = document.getElementById(ClonedTargetId);\n          checkAllNodes(TargetObject);\n     }\n     function checkAllNodes(TargetObject) {\n          if (TargetObject) {\n               var allElements = TargetObject.childNodes;\n               for (var i = 0; i < allElements.length; i++) {\n                    if (allElements[i].nodeName == 'INPUT') {\n                         /* Check if it has kids */\n\n                         allElements[i].value = \"\";\n                         /* autofill the necesary */\n                         /* Step */\n\n                         if (allElements[i].name.indexOf('step_number') > -1) {\n\n                              var StepIndex = allElements[i].name.substring(allElements[i].name.indexOf('recipe_instructions_step_') + 25, allElements[i].name.indexOf('recipe_instructions_step_') + 27);\n\n                              if (!Number(StepIndex)) {\n                                   StepIndex = Number(StepIndex.replace(\"]\", \"\"));\n                              }\n                              StepIndex++;\n                              allElements[i].value = StepIndex;\n                         }\n                    } else if (allElements[i].childNodes.length > 1 || allElements[i].nodeName != 'DIV') {\n                         checkAllNodes(allElements[i]);\n                    } else {}\n               }\n          }\n     }\n     /* all the functions to duplicate elements */\n     function duplicateSection(Id) {\n          /* we look for the last one */\n          var BaseId = getBaseId(Id);\n          /* Search for the maximum id */\n          var IdArray = new Array();\n          IdArray = getlastSectionValidId(BaseId);\n          var LastValidId = IdArray['LastValidId'];\n          var FirstAvailable = IdArray['FirstAvailable'];\n\n          var newSection = $('#' + LastValidId).clone(true);\n          newSection.attr(\"id\", FirstAvailable);\n          $(newSection).insertAfter('#' + LastValidId);\n          /* we go through all the the elements */\n          /* fix all the children ids */\n          FixChildrenId(LastValidId, FirstAvailable);\n          ClonedTargetId = FirstAvailable;\n     }\n     function duplicateSubSection(Id, GreatGrandParent) {\n          /* we look for the last one */\n          var BaseId = getBaseId(Id);\n          var SearchId = Id.replace(']', '');\n          var TargetId = GreatGrandParent.id;\n\n          /* Search for the maximum id */\n          var IdArray = getlastSubSectionValidId(BaseId, SearchId, TargetId);\n\n          /* clone element */\n          var NewObject = $('#' + IdArray['parent']['LastValidId']).clone(true);\n          NewObject.attr(\"id\", IdArray['parent']['FirstAvailable']);\n          $(NewObject).insertAfter('#' + IdArray['parent']['LastValidId']);\n          /* we go through all the the elements */\n          /* fix all the children ids */\n          FixChildrenId(IdArray['simple']['LastValidId'], IdArray['simple']['FirstAvailable'], IdArray['parent']['FirstAvailable']);\n\n          ClonedTargetId = IdArray['parent']['FirstAvailable'];\n     }\n\n     /* ---------------------------------------------- */\n     /*                  remove function               */\n     /* ---------------------------------------------- */\n     function removeButtonDown(e) {\n\n          var IdsArray = e.target.id.split(\"-\");\n\n          /* we get the last id */\n          var i = IdsArray.length - 4;\n          var LastTargetId = IdsArray[i];\n          i = IdsArray.length - 6;\n          var ParentId = IdsArray[i];\n          /* From the target id we get all the parents information */\n          /* We look for the parent - which is the one we are going to duplicate */\n          var Parent = document.getElementById(e.target.id).parentElement;\n          /* We look for the grandparent which is the target */\n          var GrandParent = Parent.parentElement;\n          /* We look for the Greatgrandparent which is the target */\n          var GreatGrandParent = GrandParent.parentElement;\n\n          /* We need to erase the grandparent */\n\n          if (Parent.classList.contains('Section_div')) {\n               var previousExtension;\n               /* Remove section */\n               var BaseId = getBaseId(LastTargetId);\n               var IdCombination = getlastSectionValidId(BaseId);\n               /* Only Item we don't erase id */\n               if (LastTargetId === BaseId + '_0' && IdCombination['LastValidId'] === BaseId + '_0') {\n                    return;\n               } else if (IdCombination['LastValidId'] === LastTargetId) {\n                    /* We just remove the item, no need to update anyting */\n\n                    $(\"#\" + LastTargetId).remove();\n                    return;\n               }\n               /* update ids */\n               $(\"#\" + LastTargetId).remove();\n               var erasedExtension = LastTargetId.replace(BaseId + \"_\", \"\");\n               var FirstAvailable = IdCombination['LastValidId'].replace(BaseId + \"_\", \"\");\n               while (erasedExtension < FirstAvailable) {\n                    erasedExtension++;\n                    previousExtension = erasedExtension - 1;\n                    Section = document.getElementById(BaseId + \"_\" + erasedExtension);\n\n                    Section.id = BaseId + \"_\" + previousExtension;\n               }\n               return;\n          } else {\n               if (Parent.classList.contains('SubSection_title_h3')) {\n                    /* Remove subsection */\n                    var RemoveTarget = GreatGrandParent;\n               } else if (Parent.classList.contains('Item_sub_td')) {\n                    /* Items */\n                    var RemoveTarget = GrandParent;\n               } else if (Parent.classList.contains('Item_input_div')) {\n                    var RemoveTarget = Parent;\n               } else {\n                    console.log('Why am I here?-------------------------');\n                    // console.log ('Parent -----------------------------');\n                    // console.log (Parent);\n                    // console.log ('GrandParent -----------------------------');\n                    // console.log (GrandParent);\n                    // console.log ('Greatgrandparent -----------------------------');\n                    // console.log (Greatgrandparent);\n                    return;\n               }\n               var BaseId = getBaseId(LastTargetId);\n               var RemoveTarget_id = RemoveTarget.id;\n               var IdCombination = getlastSubSectionValidId(BaseId, LastTargetId, RemoveTarget_id);\n               /* Only Item we don't erase id */\n               if (LastTargetId === BaseId + '_0' && IdCombination['simple']['LastValidId'] === BaseId + '_0') {\n\n                    return;\n               }\n               if (IdCombination['parent']['LastValidId'] === LastTargetId) {\n                    /* We just remove the item, no need to update anyting */\n                    $(\"#\" + LastTargetId).remove();\n                    return;\n               }\n\n               var erasedExtension = parseInt(LastTargetId.replace(BaseId + \"_\", \"\"));\n               var LastValidId = parseInt(IdCombination['simple']['LastValidId'].replace(BaseId + \"_\", \"\"));\n               var i = erasedExtension;\n               $(\"#\" + RemoveTarget_id).remove();\n               while (i < LastValidId) {\n                    /* update the parent information */\n                    i++;\n                    /* This Fixes the parent elements */\n                    previousExtension = i - 1;\n                    /*swap in the parent id */\n                    var oldTargetId = RemoveTarget_id.replace(LastTargetId, BaseId + \"_\" + i);\n                    var newTargetId = RemoveTarget_id.replace(LastTargetId, BaseId + \"_\" + previousExtension);\n\n                    var Section = document.getElementById(oldTargetId);\n                    if (Section) {\n                         Section.id = newTargetId;\n                    } else {\n                         console.log('not found - ' + i + ' - ' + FirstAvailable);\n                    }\n                    /* change the id's of all the child elements */\n                    FixChildrenId(BaseId + \"_\" + i, BaseId + \"_\" + previousExtension, newTargetId);\n               }\n               return;\n          }\n     }\n\n     /* ---------------------------------------------- */\n     /*                  common function               */\n     /* ---------------------------------------------- */\n     function getBaseId(id) {\n          var BaseId = id.substring(0, id.lastIndexOf(\"_\"));\n          return BaseId;\n     }\n     function getlastSectionValidId(BaseId) {\n          var i = 0;\n          var FoundQuery = true;\n          var LastValidId;\n          var FirstAvailable;\n          while (FoundQuery) {\n               if ($('#' + BaseId + '_' + i).length > 0) {\n                    LastValidId = BaseId + '_' + i;\n                    i++;\n               } else {\n                    FirstAvailable = BaseId + '_' + i;\n                    FoundQuery = false;\n               }\n          }\n          var ReturnArray = new Array();\n          ReturnArray['LastValidId'] = LastValidId;\n          ReturnArray['FirstAvailable'] = FirstAvailable;\n          return ReturnArray;\n     }\n     function getlastSubSectionValidId(BaseId, SearchId, TargetId) {\n          var i = 0;\n          var FoundQuery = true;\n\n          var LastValidId;\n          var FirstAvailable;\n          var ReturnArray = new Array();\n          ReturnArray['simple'] = new Array();\n          ReturnArray['parent'] = new Array();\n          while (FoundQuery) {\n               var NewId = TargetId.replace(SearchId, BaseId + '_' + i);\n               ReturnArray['parent']['FirstAvailable'] = NewId;\n               if ($('#' + NewId).length > 0) {\n                    ReturnArray['parent']['LastValidId'] = NewId;\n                    LastValidId = BaseId + '_' + i;\n                    i++;\n               } else {\n                    FirstAvailable = BaseId + '_' + i;\n                    FoundQuery = false;\n               }\n          }\n          ReturnArray['simple']['LastValidId'] = LastValidId;\n          ReturnArray['simple']['FirstAvailable'] = FirstAvailable;\n          return ReturnArray;\n     }\n     function FixChildrenId(PreviousId, NewId) {\n          var targetID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n          if (targetID == '') {\n               /* look for all the children */\n               var Target = document.getElementById(NewId);\n          } else {\n               var Target = document.getElementById(targetID);\n          }\n\n          var kids = Target.querySelectorAll('*');\n          for (var i = 0; i < kids.length; i++) {\n\n               //newSection.attr(\"id\",FirstAvailable);\n               if (kids[i].id.indexOf(PreviousId) > -1) {\n                    var dirtyId = kids[i].id;\n                    var cleanId = dirtyId.replace(PreviousId, NewId);\n                    kids[i].id = cleanId;\n\n                    /*fix the name */\n\n                    for (var j in kids[i].attributes) {\n                         if (kids[i].attributes[j].name === 'name') {\n                              var dirtyName = kids[i].attributes[j].value;\n                              var cleanName = dirtyName.replace(PreviousId, NewId);\n                              kids[i].attributes[j].value = cleanName;\n                         }\n                    }\n               }\n          }\n     }\n     function getAllClasses() {\n          var allClasses = [];\n          var postbox = document.querySelector(\"#postbox-container-2\");\n          var allElements = postbox.querySelectorAll('*');\n\n          for (var i = 0; i < allElements.length; i++) {\n               var classes = allElements[i].className.toString().split(/\\s+/);\n               for (var j = 0; j < classes.length; j++) {\n                    var cls = classes[j];\n                    if (cls.indexOf('wp') == -1 && cls.indexOf('menu') == -1 && cls.indexOf('sidebar') == -1) {\n                         if (cls && allClasses.indexOf(cls) === -1) allClasses.push(cls);\n                    }\n               }\n          }\n\n          console.log(allClasses);\n     }\n});\n\n},{}]},{},[1]);\n"]}