{"version":3,"sources":["cpt_customFields.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","window","addEventListener","TargetId","duplicateSubSection","Id","GreatGrandParent","BaseId","getBaseId","SearchId","replace","id","IdArray","getlastSubSectionValidId","NewObject","$","clone","attr","insertAfter","FixChildrenId","substring","lastIndexOf","getlastSectionValidId","LastValidId","FirstAvailable","FoundQuery","ReturnArray","Array","NewId","PreviousId","targetID","arguments","undefined","Target","document","getElementById","kids","querySelectorAll","indexOf","cleanId","j","attributes","name","cleanName","value","click","Parent","target","parentElement","GrandParent","idsArray","split","lastId","classList","contains","newSection","duplicateSection","console","log","TargetObject","allElements","childNodes","nodeName","checkAllNodes","clearFields","addButtonDown","IdsArray","LastTargetId","previousExtension","IdCombination","remove","erasedExtension","Section","RemoveTarget","RemoveTarget_id","parseInt","oldTargetId","newTargetId","removeButtonDown"],"mappings":"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","file":"cpt_customFields.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.addEventListener(\"load\", function () {\n     var TargetId;\n     /*1. We are going to add eventst to this buttons - Add and remove */\n     /*2. Create the add function - Gets the parent div and multiplies it updating the id's */\n     /*3. Create the remove function - updating id's */\n     /*4. After Remove - updating id's */\n\n     $(\".addButton\").click(function (e) {\n\n          addButtonDown(e);\n     });\n     $(\".removeButton\").click(function (e) {\n          removeButtonDown(e);\n     });\n     /* we store in a variable the last item created */\n\n     /* ---------------------------------------------- */\n     /*                   add functions                */\n     /* ---------------------------------------------- */\n     function addButtonDown(e) {\n\n          /* From the target id we get all the parents information */\n          /* We look for the parent - which is the one we are going to duplicate */\n          var Parent = document.getElementById(e.target.id).parentElement;\n          /* We look for the grandparent which is the target */\n          var GrandParent = Parent.parentElement;\n          /* We look for the Greatgrandparent which is the target */\n          var GreatGrandParent = GrandParent.parentElement;\n\n          var idsArray = e.target.id.split(\"-\");\n          /* we get the last id */\n          var i = idsArray.length - 4;\n          var lastId = idsArray[i];\n\n          /* we see if e is a Section */\n          if (Parent.classList.contains('Section_div')) {\n               /* We are duplicating a whole Section */\n               /* we need to duplicate group_0 div*/\n               duplicateSection(lastId);\n          } else if (Parent.classList.contains('SubSection_title_h3')) {\n               /* We are duplicating a whole SubSection */\n               duplicateSubSection(lastId, GreatGrandParent);\n          } else if (Parent.classList.contains('Item_sub_td')) {\n               /* Items */\n               duplicateSubSection(lastId, GrandParent);\n          } else if (Parent.classList.contains('Item_input_div')) {\n               duplicateSubSection(lastId, Parent);\n          } else {\n               console.log('Why am I here?-------------------------');\n               console.log(\"parent id - \" + Parent.id);\n               console.log(Parent);\n               console.log(\"grandparent id - \" + GrandParent.id);\n               console.log(GrandParent);\n               console.log(\"GreatGrandParent id - \" + GreatGrandParent.id);\n               console.log(GreatGrandParent);\n               console.log(\"lastId id - \" + lastId);\n          }\n          /* Now that we have added the new item */\n          /* we remove the content of the fields */\n\n          clearFields();\n     }\n     /* clear the field content */\n     function clearFields() {\n          console.log(TargetId);\n          /* Addtarget class  */\n          var TargetObject = document.getElementById(TargetId);\n          checkAllNodes();\n     }\n     function checkAllNodes(TargetObject) {\n          var allElements = TargetObject.childNodes;\n          console.log(allElements);\n          for (var i = 0; i < allElements.length; i++) {\n               console.log('allElements - ' + allElements[i].nodeName);\n               /* Check if it has kids */\n               console.log('ChildNodes - ' + allElements[i].childNodes.length);\n               // var classes = allElements[i].className.toString().split(/\\s+/);\n               // for (var j = 0; j < classes.length; j++)\n               // {\n               //      var cls = classes[j];\n               //      console.log ( cls );\n               // }\n          }\n     }\n     /* all the functions to duplicate elements */\n     function duplicateSection(Id) {\n          /* we look for the last one */\n          var BaseId = getBaseId(Id);\n          /* Search for the maximum id */\n          var IdArray = new Array();\n          IdArray = getlastSectionValidId(BaseId);\n          var LastValidId = IdArray['LastValidId'];\n          var FirstAvailable = IdArray['FirstAvailable'];\n\n          var newSection = $('#' + LastValidId).clone(true);\n          newSection.attr(\"id\", FirstAvailable);\n          $(newSection).insertAfter('#' + LastValidId);\n          /* we go through all the the elements */\n          /* fix all the children ids */\n          FixChildrenId(LastValidId, FirstAvailable);\n          TargetId = FirstAvailable;\n     }\n     function duplicateSubSection(Id, GreatGrandParent) {\n          /* we look for the last one */\n          var BaseId = getBaseId(Id);\n          var SearchId = Id.replace(']', '');\n          var TargetId = GreatGrandParent.id;\n\n          /* Search for the maximum id */\n          var IdArray = getlastSubSectionValidId(BaseId, SearchId, TargetId);\n\n          /* clone element */\n          var NewObject = $('#' + IdArray['parent']['LastValidId']).clone(true);\n          NewObject.attr(\"id\", IdArray['parent']['FirstAvailable']);\n          $(NewObject).insertAfter('#' + IdArray['parent']['LastValidId']);\n          /* we go through all the the elements */\n          /* fix all the children ids */\n          FixChildrenId(IdArray['simple']['LastValidId'], IdArray['simple']['FirstAvailable'], IdArray['parent']['FirstAvailable']);\n\n          TargetId = IdArray['parent']['FirstAvailable'];\n     }\n\n     /* ---------------------------------------------- */\n     /*                  remove function               */\n     /* ---------------------------------------------- */\n     function removeButtonDown(e) {\n\n          var IdsArray = e.target.id.split(\"-\");\n\n          /* we get the last id */\n          var i = IdsArray.length - 4;\n          var LastTargetId = IdsArray[i];\n          i = IdsArray.length - 6;\n          var ParentId = IdsArray[i];\n          /* From the target id we get all the parents information */\n          /* We look for the parent - which is the one we are going to duplicate */\n          var Parent = document.getElementById(e.target.id).parentElement;\n          /* We look for the grandparent which is the target */\n          var GrandParent = Parent.parentElement;\n          /* We look for the Greatgrandparent which is the target */\n          var GreatGrandParent = GrandParent.parentElement;\n\n          /* We need to erase the grandparent */\n\n          if (Parent.classList.contains('Section_div')) {\n               var previousExtension;\n               /* Remove section */\n               var BaseId = getBaseId(LastTargetId);\n               var IdCombination = getlastSectionValidId(BaseId);\n               /* Only Item we don't erase id */\n               if (LastTargetId === BaseId + '_0' && IdCombination['LastValidId'] === BaseId + '_0') {\n                    // console.log ('Cant erase ' + BaseId + '_0');\n                    return;\n               } else if (IdCombination['LastValidId'] === LastTargetId) {\n                    /* We just remove the item, no need to update anyting */\n\n                    $(\"#\" + LastTargetId).remove();\n                    return;\n               }\n               /* update ids */\n               $(\"#\" + LastTargetId).remove();\n               var erasedExtension = LastTargetId.replace(BaseId + \"_\", \"\");\n               var FirstAvailable = IdCombination['LastValidId'].replace(BaseId + \"_\", \"\");\n               while (erasedExtension < FirstAvailable) {\n                    erasedExtension++;\n                    previousExtension = erasedExtension - 1;\n                    Section = document.getElementById(BaseId + \"_\" + erasedExtension);\n\n                    Section.id = BaseId + \"_\" + previousExtension;\n                    console.log(BaseId + \"_\" + erasedExtension + ' - ' + BaseId + \"_\" + previousExtension + ' - ' + Section.id);\n               }\n               return;\n          } else {\n               if (Parent.classList.contains('SubSection_title_h3')) {\n                    /* Remove subsection */\n                    var RemoveTarget = GreatGrandParent;\n               } else if (Parent.classList.contains('Item_sub_td')) {\n                    /* Items */\n                    var RemoveTarget = GrandParent;\n               } else if (Parent.classList.contains('Item_input_div')) {\n                    var RemoveTarget = Parent;\n               } else {\n                    console.log('Why am I here?-------------------------');\n                    // console.log ('Parent -----------------------------');\n                    // console.log (Parent);\n                    // console.log ('GrandParent -----------------------------');\n                    // console.log (GrandParent);\n                    // console.log ('Greatgrandparent -----------------------------');\n                    // console.log (Greatgrandparent);\n                    return;\n               }\n               var BaseId = getBaseId(LastTargetId);\n               var RemoveTarget_id = RemoveTarget.id;\n               var IdCombination = getlastSubSectionValidId(BaseId, LastTargetId, RemoveTarget_id);\n               /* Only Item we don't erase id */\n               if (LastTargetId === BaseId + '_0' && IdCombination['simple']['LastValidId'] === BaseId + '_0') {\n\n                    return;\n               }\n               if (IdCombination['parent']['LastValidId'] === LastTargetId) {\n                    /* We just remove the item, no need to update anyting */\n                    $(\"#\" + LastTargetId).remove();\n                    return;\n               }\n\n               var erasedExtension = parseInt(LastTargetId.replace(BaseId + \"_\", \"\"));\n               var LastValidId = parseInt(IdCombination['simple']['LastValidId'].replace(BaseId + \"_\", \"\"));\n               var i = erasedExtension;\n               $(\"#\" + RemoveTarget_id).remove();\n               while (i < LastValidId) {\n                    /* update the parent information */\n                    i++;\n                    /* This Fixes the parent elements */\n                    previousExtension = i - 1;\n                    /*swap in the parent id */\n                    var oldTargetId = RemoveTarget_id.replace(LastTargetId, BaseId + \"_\" + i);\n                    var newTargetId = RemoveTarget_id.replace(LastTargetId, BaseId + \"_\" + previousExtension);\n\n                    var Section = document.getElementById(oldTargetId);\n                    if (Section) {\n                         Section.id = newTargetId;\n                    } else {\n                         console.log('not found - ' + i + ' - ' + FirstAvailable);\n                    }\n                    /* change the id's of all the child elements */\n                    FixChildrenId(BaseId + \"_\" + i, BaseId + \"_\" + previousExtension, newTargetId);\n               }\n               return;\n          }\n     }\n     function removeThisItem(Target) {\n          // console.log ( 'removeSection' );\n          // console.log ( Target );\n     }\n     function UpdateIds(BaseId, RemovedExtension, LastExtension) {}\n     // console.log ( 'removeSection' );\n     // console.log ( BaseId + ' - ' + RemovedExtension + ' - ' + LastExtension );\n\n\n     /* ---------------------------------------------- */\n     /*                  common function               */\n     /* ---------------------------------------------- */\n     function getBaseId(id) {\n          var BaseId = id.substring(0, id.lastIndexOf(\"_\"));\n          return BaseId;\n     }\n     function getlastSectionValidId(BaseId) {\n          var i = 0;\n          var FoundQuery = true;\n          var LastValidId;\n          var FirstAvailable;\n          while (FoundQuery) {\n               // console.log (BaseId + '_' + i);\n               if ($('#' + BaseId + '_' + i).length > 0) {\n                    LastValidId = BaseId + '_' + i;\n                    i++;\n               } else {\n                    FirstAvailable = BaseId + '_' + i;\n                    FoundQuery = false;\n               }\n          }\n          var ReturnArray = new Array();\n          ReturnArray['LastValidId'] = LastValidId;\n          ReturnArray['FirstAvailable'] = FirstAvailable;\n          return ReturnArray;\n     }\n     function getlastSubSectionValidId(BaseId, SearchId, TargetId) {\n          var i = 0;\n          var FoundQuery = true;\n\n          var LastValidId;\n          var FirstAvailable;\n          var ReturnArray = new Array();\n          ReturnArray['simple'] = new Array();\n          ReturnArray['parent'] = new Array();\n          while (FoundQuery) {\n               var NewId = TargetId.replace(SearchId, BaseId + '_' + i);\n               ReturnArray['parent']['FirstAvailable'] = NewId;\n               if ($('#' + NewId).length > 0) {\n                    ReturnArray['parent']['LastValidId'] = NewId;\n                    LastValidId = BaseId + '_' + i;\n                    i++;\n               } else {\n                    FirstAvailable = BaseId + '_' + i;\n                    FoundQuery = false;\n               }\n          }\n          ReturnArray['simple']['LastValidId'] = LastValidId;\n          ReturnArray['simple']['FirstAvailable'] = FirstAvailable;\n          return ReturnArray;\n     }\n     function FixChildrenId(PreviousId, NewId) {\n          var targetID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n          //console.log (PreviousId + ' - ' + NewId + ' - ' + targetID);\n          if (targetID == '') {\n               /* look for all the children */\n               var Target = document.getElementById(NewId);\n          } else {\n               var Target = document.getElementById(targetID);\n          }\n\n          var kids = Target.querySelectorAll('*');\n          for (var i = 0; i < kids.length; i++) {\n\n               //newSection.attr(\"id\",FirstAvailable);\n               if (kids[i].id.indexOf(PreviousId) > -1) {\n                    var dirtyId = kids[i].id;\n                    var cleanId = dirtyId.replace(PreviousId, NewId);\n                    kids[i].id = cleanId;\n\n                    /*fix the name */\n\n                    for (var j in kids[i].attributes) {\n                         if (kids[i].attributes[j].name === 'name') {\n                              var dirtyName = kids[i].attributes[j].value;\n                              var cleanName = dirtyName.replace(PreviousId, NewId);\n                              kids[i].attributes[j].value = cleanName;\n                         }\n                    }\n               }\n          }\n     }\n     function getAllClasses() {\n          var allClasses = [];\n          var postbox = document.querySelector(\"#postbox-container-2\");\n          var allElements = postbox.querySelectorAll('*');\n\n          for (var i = 0; i < allElements.length; i++) {\n               var classes = allElements[i].className.toString().split(/\\s+/);\n               for (var j = 0; j < classes.length; j++) {\n                    var cls = classes[j];\n                    if (cls.indexOf('wp') == -1 && cls.indexOf('menu') == -1 && cls.indexOf('sidebar') == -1) {\n                         if (cls && allClasses.indexOf(cls) === -1) allClasses.push(cls);\n                    }\n               }\n          }\n\n          console.log(allClasses);\n     }\n});\n\n},{}]},{},[1]);\n"]}