{"version":3,"sources":["cpt_customFields.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","duplicateSubSection","Id","GreatGrandParent","IdArray","getlastSubSectionValidId","getBaseId","replace","id","NewObject","$","clone","attr","insertAfter","FixChildrenId","substring","lastIndexOf","getlastSectionValidId","BaseId","LastValidId","FirstAvailable","FoundQuery","ReturnArray","Array","SearchId","TargetId","NewId","PreviousId","targetID","arguments","undefined","Target","document","getElementById","kids","querySelectorAll","indexOf","cleanId","j","attributes","name","cleanName","value","window","addEventListener","click","Parent","target","parentElement","GrandParent","idsArray","split","lastId","classList","contains","newSection","duplicateSection","console","log","addButtonDown","IdsArray","LastTargetId","previousExtension","IdCombination","remove","erasedExtension","Section","RemoveTarget","RemoveTarget_id","parseInt","oldTargetId","newTargetId","removeButtonDown"],"mappings":"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","file":"cpt_customFields.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.addEventListener(\"load\", function () {\n\n     /*1. We are going to add eventst to this buttons - Add and remove */\n     /*2. Create the add function - Gets the parent div and multiplies it updating the id's */\n     /*3. Create the remove function - updating id's */\n     /*4. After Remove - updating id's */\n\n     $(\".addButton\").click(function (e) {\n\n          addButtonDown(e);\n     });\n     $(\".removeButton\").click(function (e) {\n          removeButtonDown(e);\n     });\n});\n/* ---------------------------------------------- */\n/*                   add functions                */\n/* ---------------------------------------------- */\nfunction addButtonDown(e) {\n\n     /* From the target id we get all the parents information */\n     /* We look for the parent - which is the one we are going to duplicate */\n     var Parent = document.getElementById(e.target.id).parentElement;\n     /* We look for the grandparent which is the target */\n     var GrandParent = Parent.parentElement;\n     /* We look for the Greatgrandparent which is the target */\n     var GreatGrandParent = GrandParent.parentElement;\n\n     var idsArray = e.target.id.split(\"-\");\n     /* we get the last id */\n     var i = idsArray.length - 4;\n     var lastId = idsArray[i];\n\n     /* we see if e is a Section */\n     if (Parent.classList.contains('Section_div')) {\n          /* We are duplicating a whole Section */\n          /* we need to duplicate group_0 div*/\n          duplicateSection(lastId);\n     } else if (Parent.classList.contains('SubSection_title_h3')) {\n          /* We are duplicating a whole SubSection */\n          duplicateSubSection(lastId, GreatGrandParent);\n     } else if (Parent.classList.contains('Item_sub_td')) {\n          /* Items */\n          duplicateSubSection(lastId, GrandParent);\n     } else if (Parent.classList.contains('Item_input_div')) {\n          duplicateSubSection(lastId, Parent);\n     } else {\n          console.log('Why am I here?-------------------------');\n          console.log(\"parent id - \" + Parent.id);\n          console.log(Parent);\n          console.log(\"grandparent id - \" + GrandParent.id);\n          console.log(GrandParent);\n          console.log(\"GreatGrandParent id - \" + GreatGrandParent.id);\n          console.log(GreatGrandParent);\n          console.log(\"lastId id - \" + lastId);\n     }\n}\n/* all the functions to duplicate elements */\nfunction duplicateSection(Id) {\n     /* we look for the last one */\n     var BaseId = getBaseId(Id);\n     /* Search for the maximum id */\n     var IdArray = new Array();\n     IdArray = getlastSectionValidId(BaseId);\n     var LastValidId = IdArray['LastValidId'];\n     var FirstAvailable = IdArray['FirstAvailable'];\n\n     var newSection = $('#' + LastValidId).clone(true);\n     newSection.attr(\"id\", FirstAvailable);\n     $(newSection).insertAfter('#' + LastValidId);\n     /* we go through all the the elements */\n     /* fix all the children ids */\n     FixChildrenId(LastValidId, FirstAvailable);\n}\nfunction duplicateSubSection(Id, GreatGrandParent) {\n     /* we look for the last one */\n     var BaseId = getBaseId(Id);\n     var SearchId = Id.replace(']', '');\n     var TargetId = GreatGrandParent.id;\n\n     /* Search for the maximum id */\n     var IdArray = getlastSubSectionValidId(BaseId, SearchId, TargetId);\n\n     /* clone element */\n     var NewObject = $('#' + IdArray['parent']['LastValidId']).clone(true);\n     NewObject.attr(\"id\", IdArray['parent']['FirstAvailable']);\n     $(NewObject).insertAfter('#' + IdArray['parent']['LastValidId']);\n     /* we go through all the the elements */\n     /* fix all the children ids */\n     FixChildrenId(IdArray['simple']['LastValidId'], IdArray['simple']['FirstAvailable'], IdArray['parent']['FirstAvailable']);\n}\n\n/* ---------------------------------------------- */\n/*                  remove function               */\n/* ---------------------------------------------- */\nfunction removeButtonDown(e) {\n\n     var IdsArray = e.target.id.split(\"-\");\n\n     /* we get the last id */\n     var i = IdsArray.length - 4;\n     var LastTargetId = IdsArray[i];\n     i = IdsArray.length - 6;\n     var ParentId = IdsArray[i];\n\n     /* From the target id we get all the parents information */\n     /* We look for the parent - which is the one we are going to duplicate */\n     var Parent = document.getElementById(e.target.id).parentElement;\n     /* We look for the grandparent which is the target */\n     var GrandParent = Parent.parentElement;\n     /* We look for the Greatgrandparent which is the target */\n     var GreatGrandParent = GrandParent.parentElement;\n\n     /* We need to erase the grandparent */\n\n     if (Parent.classList.contains('Section_div')) {\n          var previousExtension;\n          /* Remove section */\n          var BaseId = getBaseId(LastTargetId);\n          var IdCombination = getlastSectionValidId(BaseId);\n          /* Only Item we don't erase id */\n          if (LastTargetId === BaseId + '_0' && IdCombination['LastValidId'] === BaseId + '_0') {\n               // console.log ('Cant erase ' + BaseId + '_0');\n               return;\n          } else if (IdCombination['LastValidId'] === LastTargetId) {\n               /* We just remove the item, no need to update anyting */\n\n               $(\"#\" + LastTargetId).remove();\n               return;\n          }\n          /* update ids */\n          $(\"#\" + LastTargetId).remove();\n          var erasedExtension = LastTargetId.replace(BaseId + \"_\", \"\");\n          var FirstAvailable = IdCombination['LastValidId'].replace(BaseId + \"_\", \"\");\n          while (erasedExtension < FirstAvailable) {\n               erasedExtension++;\n               previousExtension = erasedExtension - 1;\n               Section = document.getElementById(BaseId + \"_\" + erasedExtension);\n\n               Section.id = BaseId + \"_\" + previousExtension;\n               console.log(BaseId + \"_\" + erasedExtension + ' - ' + BaseId + \"_\" + previousExtension + ' - ' + Section.id);\n          }\n          return;\n     } else {\n          if (Parent.classList.contains('SubSection_title_h3')) {\n               /* Remove subsection */\n               var RemoveTarget = GreatGrandParent;\n          } else if (Parent.classList.contains('Item_sub_td')) {\n               /* Items */\n               var RemoveTarget = GrandParent;\n          } else if (Parent.classList.contains('Item_input_div')) {\n               var RemoveTarget = Parent;\n          } else {\n               console.log('Why am I here?-------------------------');\n               // console.log ('Parent -----------------------------');\n               // console.log (Parent);\n               // console.log ('GrandParent -----------------------------');\n               // console.log (GrandParent);\n               // console.log ('Greatgrandparent -----------------------------');\n               // console.log (Greatgrandparent);\n               return;\n          }\n\n          var BaseId = getBaseId(LastTargetId);\n          var RemoveTarget_id = RemoveTarget.id;\n          var IdCombination = getlastSubSectionValidId(BaseId, LastTargetId, RemoveTarget_id);\n          /* Only Item we don't erase id */\n          if (LastTargetId === BaseId + '_0' && IdCombination['simple']['LastValidId'] === BaseId + '_0') {\n\n               return;\n          }\n          if (IdCombination['parent']['LastValidId'] === LastTargetId) {\n               /* We just remove the item, no need to update anyting */\n               $(\"#\" + LastTargetId).remove();\n               return;\n          }\n\n          var erasedExtension = parseInt(LastTargetId.replace(BaseId + \"_\", \"\"));\n          var LastValidId = parseInt(IdCombination['simple']['LastValidId'].replace(BaseId + \"_\", \"\"));\n          var i = erasedExtension;\n          $(\"#\" + RemoveTarget_id).remove();\n          while (i < LastValidId) {\n               /* update the parent information */\n               i++;\n               /* This Fixes the parent elements */\n               previousExtension = i - 1;\n               /*swap in the parent id */\n               var oldTargetId = RemoveTarget_id.replace(LastTargetId, BaseId + \"_\" + i);\n               var newTargetId = RemoveTarget_id.replace(LastTargetId, BaseId + \"_\" + previousExtension);\n\n               var Section = document.getElementById(oldTargetId);\n               if (Section) {\n                    Section.id = newTargetId;\n               } else {\n                    console.log('not found - ' + i + ' - ' + FirstAvailable);\n               }\n               /* change the id's of all the child elements */\n               FixChildrenId(BaseId + \"_\" + i, BaseId + \"_\" + previousExtension, newTargetId);\n          }\n          return;\n     }\n}\nfunction removeThisItem(Target) {\n     // console.log ( 'removeSection' );\n     // console.log ( Target );\n}\nfunction UpdateIds(BaseId, RemovedExtension, LastExtension) {}\n// console.log ( 'removeSection' );\n// console.log ( BaseId + ' - ' + RemovedExtension + ' - ' + LastExtension );\n\n\n/* ---------------------------------------------- */\n/*                  common function               */\n/* ---------------------------------------------- */\nfunction getBaseId(id) {\n     var BaseId = id.substring(0, id.lastIndexOf(\"_\"));\n     return BaseId;\n}\nfunction getlastSectionValidId(BaseId) {\n     var i = 0;\n     var FoundQuery = true;\n     var LastValidId;\n     var FirstAvailable;\n     while (FoundQuery) {\n          // console.log (BaseId + '_' + i);\n          if ($('#' + BaseId + '_' + i).length > 0) {\n               LastValidId = BaseId + '_' + i;\n               i++;\n          } else {\n               FirstAvailable = BaseId + '_' + i;\n               FoundQuery = false;\n          }\n     }\n     var ReturnArray = new Array();\n     ReturnArray['LastValidId'] = LastValidId;\n     ReturnArray['FirstAvailable'] = FirstAvailable;\n     return ReturnArray;\n}\nfunction getlastSubSectionValidId(BaseId, SearchId, TargetId) {\n     var i = 0;\n     var FoundQuery = true;\n\n     var LastValidId;\n     var FirstAvailable;\n     var ReturnArray = new Array();\n     ReturnArray['simple'] = new Array();\n     ReturnArray['parent'] = new Array();\n     while (FoundQuery) {\n          var NewId = TargetId.replace(SearchId, BaseId + '_' + i);\n          ReturnArray['parent']['FirstAvailable'] = NewId;\n          if ($('#' + NewId).length > 0) {\n               ReturnArray['parent']['LastValidId'] = NewId;\n               LastValidId = BaseId + '_' + i;\n               i++;\n          } else {\n               FirstAvailable = BaseId + '_' + i;\n               FoundQuery = false;\n          }\n     }\n     ReturnArray['simple']['LastValidId'] = LastValidId;\n     ReturnArray['simple']['FirstAvailable'] = FirstAvailable;\n     return ReturnArray;\n}\nfunction FixChildrenId(PreviousId, NewId) {\n     var targetID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n     //console.log (PreviousId + ' - ' + NewId + ' - ' + targetID);\n     if (targetID == '') {\n          /* look for all the children */\n          var Target = document.getElementById(NewId);\n     } else {\n          var Target = document.getElementById(targetID);\n     }\n\n     var kids = Target.querySelectorAll('*');\n     for (var i = 0; i < kids.length; i++) {\n\n          //newSection.attr(\"id\",FirstAvailable);\n          if (kids[i].id.indexOf(PreviousId) > -1) {\n               var dirtyId = kids[i].id;\n               var cleanId = dirtyId.replace(PreviousId, NewId);\n               kids[i].id = cleanId;\n\n               /*fix the name */\n\n               for (var j in kids[i].attributes) {\n                    if (kids[i].attributes[j].name === 'name') {\n                         var dirtyName = kids[i].attributes[j].value;\n                         var cleanName = dirtyName.replace(PreviousId, NewId);\n                         kids[i].attributes[j].value = cleanName;\n                    }\n               }\n          }\n     }\n}\n\nfunction getAllClasses() {\n     var allClasses = [];\n     var postbox = document.querySelector(\"#postbox-container-2\");\n     var allElements = postbox.querySelectorAll('*');\n\n     for (var i = 0; i < allElements.length; i++) {\n          var classes = allElements[i].className.toString().split(/\\s+/);\n          for (var j = 0; j < classes.length; j++) {\n               var cls = classes[j];\n               if (cls.indexOf('wp') == -1 && cls.indexOf('menu') == -1 && cls.indexOf('sidebar') == -1) {\n                    if (cls && allClasses.indexOf(cls) === -1) allClasses.push(cls);\n               }\n          }\n     }\n\n     console.log(allClasses);\n}\n\n},{}]},{},[1]);\n"]}